// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package airplanegosdk

import (
	"bytes"
	"context"
	"fmt"
	"github.com/speakeasy-sdks/airplane-go-sdk/v3/internal/hooks"
	"github.com/speakeasy-sdks/airplane-go-sdk/v3/pkg/models/operations"
	"github.com/speakeasy-sdks/airplane-go-sdk/v3/pkg/models/sdkerrors"
	"github.com/speakeasy-sdks/airplane-go-sdk/v3/pkg/models/shared"
	"github.com/speakeasy-sdks/airplane-go-sdk/v3/pkg/utils"
	"io"
	"net/http"
	"net/url"
)

// Runbooks - A Runbook is a multi-step, human-in-the-loop workflow. Runbooks are able to take a set of top-level parameters, run one or more functions, and generate output at each step of the way.
type Runbooks struct {
	sdkConfiguration sdkConfiguration
}

func newRunbooks(sdkConfig sdkConfiguration) *Runbooks {
	return &Runbooks{
		sdkConfiguration: sdkConfig,
	}
}

// Execute Runbook
// Execute a runbook and receive a session ID to track the runbook's execution.
// Check on the status of your newly created session with [/sessions/get](/api/sessions#sessions-get).
func (s *Runbooks) Execute(ctx context.Context, executeRunbookRequest shared.ExecuteRunbookRequest, envSlug *string) (*operations.ExecuteRunbookResponse, error) {
	hookCtx := hooks.HookContext{
		Context:        ctx,
		OperationID:    "executeRunbook",
		SecuritySource: s.sdkConfiguration.Security,
	}

	request := operations.ExecuteRunbookRequest{
		ExecuteRunbookRequest: executeRunbookRequest,
		EnvSlug:               envSlug,
	}

	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	opURL, err := url.JoinPath(baseURL, "/runbooks/execute")
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, false, false, "ExecuteRunbookRequest", "json", `request:"mediaType=application/json"`)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", opURL, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "application/json")
	req.Header.Set("User-Agent", s.sdkConfiguration.UserAgent)
	req.Header.Set("Content-Type", reqContentType)

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.sdkConfiguration.SecurityClient

	req, err = s.sdkConfiguration.Hooks.BeforeRequest(hooks.BeforeRequestContext{HookContext: hookCtx}, req)
	if err != nil {
		return nil, err
	}

	httpRes, err := client.Do(req)
	if err != nil || httpRes == nil {
		if err != nil {
			err = fmt.Errorf("error sending request: %w", err)
		} else {
			err = fmt.Errorf("error sending request: no response")
		}

		_, err = s.sdkConfiguration.Hooks.AfterError(hooks.AfterErrorContext{HookContext: hookCtx}, nil, err)
		return nil, err
	} else if utils.MatchStatusCodes([]string{"4XX", "5XX"}, httpRes.StatusCode) {
		httpRes, err = s.sdkConfiguration.Hooks.AfterError(hooks.AfterErrorContext{HookContext: hookCtx}, httpRes, nil)
		if err != nil {
			return nil, err
		}
	} else {
		httpRes, err = s.sdkConfiguration.Hooks.AfterSuccess(hooks.AfterSuccessContext{HookContext: hookCtx}, httpRes)
		if err != nil {
			return nil, err
		}
	}
	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.ExecuteRunbookResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out shared.ExecuteRunbookResponse
			if err := utils.UnmarshalJsonFromResponseBody(bytes.NewBuffer(rawBody), &out, ""); err != nil {
				return nil, err
			}

			res.ExecuteRunbookResponse = &out
		default:
			return nil, sdkerrors.NewSDKError(fmt.Sprintf("unknown content-type received: %s", contentType), httpRes.StatusCode, string(rawBody), httpRes)
		}
	case httpRes.StatusCode >= 400 && httpRes.StatusCode < 500:
		fallthrough
	case httpRes.StatusCode >= 500 && httpRes.StatusCode < 600:
		return nil, sdkerrors.NewSDKError("API error occurred", httpRes.StatusCode, string(rawBody), httpRes)
	}

	return res, nil
}
