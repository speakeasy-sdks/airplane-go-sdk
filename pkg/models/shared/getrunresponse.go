// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Runtime that this run executed on.
type Runtime string

const (
	RuntimeStandard Runtime = "standard"
	RuntimeWorkflow Runtime = "workflow"
)

func (e Runtime) ToPointer() *Runtime {
	return &e
}

func (e *Runtime) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "workflow":
		*e = Runtime(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Runtime: %v", v)
	}
}

// Status of this run.
type Status string

const (
	StatusNotStarted Status = "NotStarted"
	StatusQueued     Status = "Queued"
	StatusActive     Status = "Active"
	StatusSucceeded  Status = "Succeeded"
	StatusFailed     Status = "Failed"
	StatusCancelled  Status = "Cancelled"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NotStarted":
		fallthrough
	case "Queued":
		fallthrough
	case "Active":
		fallthrough
	case "Succeeded":
		fallthrough
	case "Failed":
		fallthrough
	case "Cancelled":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type GetRunResponse struct {
	// When the run became active. Empty if this run has not started yet.
	ActiveAt *string `json:"activeAt,omitempty"`
	// When the run was cancelled. Empty if this run was not cancelled.
	CancelledAt *string `json:"cancelledAt,omitempty"`
	// ID of the user who cancelled this run.
	CancelledBy *string         `json:"cancelledBy,omitempty"`
	Constraints *RunConstraints `json:"constraints,omitempty"`
	// When this run was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// ID of the user that created this run.
	CreatedBy *string `json:"createdBy,omitempty"`
	// When the run failed. Empty if this run did not fail.
	FailedAt *string `json:"failedAt,omitempty"`
	// Unique ID of this run.
	ID *string `json:"id,omitempty"`
	// Whether or not this run is private.
	IsPrivate *bool `json:"isPrivate,omitempty"`
	// Mapping of parameter slug to value used in this run's execution.
	ParamValues map[string]string `json:"paramValues,omitempty"`
	// Schema for the set of values users can provide when executing this run.
	Params []Parameter `json:"params,omitempty"`
	// Explicit permissions of this run if it is private.
	Permissions []Permission      `json:"permissions,omitempty"`
	Resources   map[string]string `json:"resources,omitempty"`
	// Runtime that this run executed on.
	Runtime *Runtime `json:"runtime,omitempty"`
	// ID of the session this run was spawned from if triggered by a session.
	SessionID *string `json:"sessionID,omitempty"`
	// Status of this run.
	Status *Status `json:"status,omitempty"`
	// When the run succeeded. Empty if this run did not succeed.
	SucceededAt *string `json:"succeededAt,omitempty"`
	// ID of the task this run was spawned from if triggered by a task.
	TaskID *string `json:"taskID,omitempty"`
	// ID of the team that owns this run.
	TeamID *string `json:"teamID,omitempty"`
	// Maximum amount of time in seconds the run could have executed for.
	Timeout *int64 `json:"timeout,omitempty"`
	// ID of the storage zone that the run used for its runs and outputs. Will be null if
	// there was no storage zone, in which case logs and outputs will be in the airplane API.
	ZoneID *string `json:"zoneID,omitempty"`
}

func (o *GetRunResponse) GetActiveAt() *string {
	if o == nil {
		return nil
	}
	return o.ActiveAt
}

func (o *GetRunResponse) GetCancelledAt() *string {
	if o == nil {
		return nil
	}
	return o.CancelledAt
}

func (o *GetRunResponse) GetCancelledBy() *string {
	if o == nil {
		return nil
	}
	return o.CancelledBy
}

func (o *GetRunResponse) GetConstraints() *RunConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *GetRunResponse) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetRunResponse) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetRunResponse) GetFailedAt() *string {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *GetRunResponse) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetRunResponse) GetIsPrivate() *bool {
	if o == nil {
		return nil
	}
	return o.IsPrivate
}

func (o *GetRunResponse) GetParamValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.ParamValues
}

func (o *GetRunResponse) GetParams() []Parameter {
	if o == nil {
		return nil
	}
	return o.Params
}

func (o *GetRunResponse) GetPermissions() []Permission {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *GetRunResponse) GetResources() map[string]string {
	if o == nil {
		return nil
	}
	return o.Resources
}

func (o *GetRunResponse) GetRuntime() *Runtime {
	if o == nil {
		return nil
	}
	return o.Runtime
}

func (o *GetRunResponse) GetSessionID() *string {
	if o == nil {
		return nil
	}
	return o.SessionID
}

func (o *GetRunResponse) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetRunResponse) GetSucceededAt() *string {
	if o == nil {
		return nil
	}
	return o.SucceededAt
}

func (o *GetRunResponse) GetTaskID() *string {
	if o == nil {
		return nil
	}
	return o.TaskID
}

func (o *GetRunResponse) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetRunResponse) GetTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *GetRunResponse) GetZoneID() *string {
	if o == nil {
		return nil
	}
	return o.ZoneID
}
