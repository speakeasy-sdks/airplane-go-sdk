// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ParametersParameterComponent - Used to specify UI-only type modifiers
type ParametersParameterComponent string

const (
	ParametersParameterComponentUnknown   ParametersParameterComponent = ""
	ParametersParameterComponentEditorSQL ParametersParameterComponent = "editor-sql"
	ParametersParameterComponentTextarea  ParametersParameterComponent = "textarea"
)

func (e ParametersParameterComponent) ToPointer() *ParametersParameterComponent {
	return &e
}

func (e *ParametersParameterComponent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "editor-sql":
		fallthrough
	case "textarea":
		*e = ParametersParameterComponent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ParametersParameterComponent: %v", v)
	}
}

// ParametersParameterType - Parameter data type.
type ParametersParameterType string

const (
	ParametersParameterTypeAny       ParametersParameterType = "any"
	ParametersParameterTypeString    ParametersParameterType = "string"
	ParametersParameterTypeBoolean   ParametersParameterType = "boolean"
	ParametersParameterTypeUpload    ParametersParameterType = "upload"
	ParametersParameterTypeInteger   ParametersParameterType = "integer"
	ParametersParameterTypeFloat     ParametersParameterType = "float"
	ParametersParameterTypeDate      ParametersParameterType = "date"
	ParametersParameterTypeDatetime  ParametersParameterType = "datetime"
	ParametersParameterTypeConfigvar ParametersParameterType = "configvar"
	ParametersParameterTypeList      ParametersParameterType = "list"
	ParametersParameterTypeMap       ParametersParameterType = "map"
	ParametersParameterTypeObject    ParametersParameterType = "object"
)

func (e ParametersParameterType) ToPointer() *ParametersParameterType {
	return &e
}

func (e *ParametersParameterType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "string":
		fallthrough
	case "boolean":
		fallthrough
	case "upload":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "date":
		fallthrough
	case "datetime":
		fallthrough
	case "configvar":
		fallthrough
	case "list":
		fallthrough
	case "map":
		fallthrough
	case "object":
		*e = ParametersParameterType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ParametersParameterType: %v", v)
	}
}

type ParametersParameter struct {
	// Used to specify UI-only type modifiers
	Component   *ParametersParameterComponent `json:"component,omitempty"`
	Constraints *ParametersConstraints        `json:"constraints,omitempty"`
	// Optional default value for this parameter, used if not set.
	Default interface{} `json:"default,omitempty"`
	// Description for this parameter.
	Desc *string `json:"desc,omitempty"`
	// Name for this parameter.
	Name *string `json:"name,omitempty"`
	// If this parameter has an object data type, represents an ordered list of key-value pairs that can be included in this object.
	Parameters []ParametersParameter `json:"parameters,omitempty"`
	// A human-friendly identifier for the parameter.
	Slug *string `json:"slug,omitempty"`
	// Parameter data type.
	Type   *ParametersParameterType `json:"type,omitempty"`
	Values *ParametersParameter     `json:"values,omitempty"`
}
