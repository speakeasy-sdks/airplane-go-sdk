// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RoleID - Which role is assigned to this permission.
type RoleID string

const (
	RoleIDTeamAdmin        RoleID = "team_admin"
	RoleIDTeamDeveloper    RoleID = "team_developer"
	RoleIDTaskViewer       RoleID = "task_viewer"
	RoleIDTaskRequester    RoleID = "task_requester"
	RoleIDTaskExecuter     RoleID = "task_executer"
	RoleIDTaskAdmin        RoleID = "task_admin"
	RoleIDRunViewer        RoleID = "run_viewer"
	RoleIDRunbookViewer    RoleID = "runbook_viewer"
	RoleIDRunbookRequester RoleID = "runbook_requester"
	RoleIDRunbookExecuter  RoleID = "runbook_executer"
	RoleIDRunbookAdmin     RoleID = "runbook_admin"
	RoleIDSessionViewer    RoleID = "session_viewer"
	RoleIDSessionExecuter  RoleID = "session_executer"
	RoleIDSessionAdmin     RoleID = "session_admin"
	RoleIDResourceUser     RoleID = "resource_user"
	RoleIDDeployCreator    RoleID = "deploy_creator"
	RoleIDGroupAdmin       RoleID = "group_admin"
)

func (e RoleID) ToPointer() *RoleID {
	return &e
}

func (e *RoleID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team_admin":
		fallthrough
	case "team_developer":
		fallthrough
	case "task_viewer":
		fallthrough
	case "task_requester":
		fallthrough
	case "task_executer":
		fallthrough
	case "task_admin":
		fallthrough
	case "run_viewer":
		fallthrough
	case "runbook_viewer":
		fallthrough
	case "runbook_requester":
		fallthrough
	case "runbook_executer":
		fallthrough
	case "runbook_admin":
		fallthrough
	case "session_viewer":
		fallthrough
	case "session_executer":
		fallthrough
	case "session_admin":
		fallthrough
	case "resource_user":
		fallthrough
	case "deploy_creator":
		fallthrough
	case "group_admin":
		*e = RoleID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RoleID: %v", v)
	}
}

type Permission struct {
	// Which action this permission applies to.
	Action *string `json:"action,omitempty"`
	// Which role is assigned to this permission.
	RoleID *RoleID `json:"roleID,omitempty"`
	// ID of the group  this permission applies to if assigned to a group.
	SubGroupID *string `json:"subGroupID,omitempty"`
	// ID of the user this permission applies to if assigned directly to a user.
	SubUserID *string `json:"subUserID,omitempty"`
}

func (o *Permission) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *Permission) GetRoleID() *RoleID {
	if o == nil {
		return nil
	}
	return o.RoleID
}

func (o *Permission) GetSubGroupID() *string {
	if o == nil {
		return nil
	}
	return o.SubGroupID
}

func (o *Permission) GetSubUserID() *string {
	if o == nil {
		return nil
	}
	return o.SubUserID
}
