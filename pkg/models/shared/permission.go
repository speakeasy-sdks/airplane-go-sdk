// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PermissionRoleID - Which role is assigned to this permission.
type PermissionRoleID string

const (
	PermissionRoleIDTeamAdmin        PermissionRoleID = "team_admin"
	PermissionRoleIDTeamDeveloper    PermissionRoleID = "team_developer"
	PermissionRoleIDTaskViewer       PermissionRoleID = "task_viewer"
	PermissionRoleIDTaskRequester    PermissionRoleID = "task_requester"
	PermissionRoleIDTaskExecuter     PermissionRoleID = "task_executer"
	PermissionRoleIDTaskAdmin        PermissionRoleID = "task_admin"
	PermissionRoleIDRunViewer        PermissionRoleID = "run_viewer"
	PermissionRoleIDRunbookViewer    PermissionRoleID = "runbook_viewer"
	PermissionRoleIDRunbookRequester PermissionRoleID = "runbook_requester"
	PermissionRoleIDRunbookExecuter  PermissionRoleID = "runbook_executer"
	PermissionRoleIDRunbookAdmin     PermissionRoleID = "runbook_admin"
	PermissionRoleIDSessionViewer    PermissionRoleID = "session_viewer"
	PermissionRoleIDSessionExecuter  PermissionRoleID = "session_executer"
	PermissionRoleIDSessionAdmin     PermissionRoleID = "session_admin"
	PermissionRoleIDResourceUser     PermissionRoleID = "resource_user"
	PermissionRoleIDDeployCreator    PermissionRoleID = "deploy_creator"
	PermissionRoleIDGroupAdmin       PermissionRoleID = "group_admin"
)

func (e PermissionRoleID) ToPointer() *PermissionRoleID {
	return &e
}

func (e *PermissionRoleID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team_admin":
		fallthrough
	case "team_developer":
		fallthrough
	case "task_viewer":
		fallthrough
	case "task_requester":
		fallthrough
	case "task_executer":
		fallthrough
	case "task_admin":
		fallthrough
	case "run_viewer":
		fallthrough
	case "runbook_viewer":
		fallthrough
	case "runbook_requester":
		fallthrough
	case "runbook_executer":
		fallthrough
	case "runbook_admin":
		fallthrough
	case "session_viewer":
		fallthrough
	case "session_executer":
		fallthrough
	case "session_admin":
		fallthrough
	case "resource_user":
		fallthrough
	case "deploy_creator":
		fallthrough
	case "group_admin":
		*e = PermissionRoleID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PermissionRoleID: %v", v)
	}
}

type Permission struct {
	// Which action this permission applies to.
	Action *string `json:"action,omitempty"`
	// Which role is assigned to this permission.
	RoleID *PermissionRoleID `json:"roleID,omitempty"`
	// ID of the group  this permission applies to if assigned to a group.
	SubGroupID *string `json:"subGroupID,omitempty"`
	// ID of the user this permission applies to if assigned directly to a user.
	SubUserID *string `json:"subUserID,omitempty"`
}
