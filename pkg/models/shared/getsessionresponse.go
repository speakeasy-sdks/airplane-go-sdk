// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GetSessionResponseStatus - Status of this session.
type GetSessionResponseStatus string

const (
	GetSessionResponseStatusPending    GetSessionResponseStatus = "Pending"
	GetSessionResponseStatusActive     GetSessionResponseStatus = "Active"
	GetSessionResponseStatusWaiting    GetSessionResponseStatus = "Waiting"
	GetSessionResponseStatusSucceeded  GetSessionResponseStatus = "Succeeded"
	GetSessionResponseStatusFailed     GetSessionResponseStatus = "Failed"
	GetSessionResponseStatusCancelling GetSessionResponseStatus = "Cancelling"
	GetSessionResponseStatusCancelled  GetSessionResponseStatus = "Cancelled"
)

func (e GetSessionResponseStatus) ToPointer() *GetSessionResponseStatus {
	return &e
}

func (e *GetSessionResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Pending":
		fallthrough
	case "Active":
		fallthrough
	case "Waiting":
		fallthrough
	case "Succeeded":
		fallthrough
	case "Failed":
		fallthrough
	case "Cancelling":
		fallthrough
	case "Cancelled":
		*e = GetSessionResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSessionResponseStatus: %v", v)
	}
}

type GetSessionResponse struct {
	// When this session was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// ID of the user that created this session.
	CreatedBy *string `json:"createdBy,omitempty"`
	// Unique ID of this session.
	ID *string `json:"id,omitempty"`
	// Whether or not the session is private.
	IsPrivate *bool `json:"isPrivate,omitempty"`
	// Name of this session.
	Name *string `json:"name,omitempty"`
	// Mapping of parameter slug to value used in this session's execution.
	ParamValues map[string]string `json:"paramValues,omitempty"`
	// Schema for the set of values users can provide when executing this session.
	Params []Parameter `json:"params,omitempty"`
	// Explicit permissions of this session if it is private.
	Permissions []Permission `json:"permissions,omitempty"`
	// ID of the runbook this session was spawned from if triggered from a runbook.
	RunbookID *string `json:"runbookID,omitempty"`
	// Status of this session.
	Status *GetSessionResponseStatus `json:"status,omitempty"`
	// ID of the team that owns this session.
	TeamID *string `json:"teamID,omitempty"`
	// When this session was updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`
	// ID of the user who updated this session.
	UpdatedBy *string `json:"updatedBy,omitempty"`
}

func (o *GetSessionResponse) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetSessionResponse) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetSessionResponse) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetSessionResponse) GetIsPrivate() *bool {
	if o == nil {
		return nil
	}
	return o.IsPrivate
}

func (o *GetSessionResponse) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetSessionResponse) GetParamValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.ParamValues
}

func (o *GetSessionResponse) GetParams() []Parameter {
	if o == nil {
		return nil
	}
	return o.Params
}

func (o *GetSessionResponse) GetPermissions() []Permission {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *GetSessionResponse) GetRunbookID() *string {
	if o == nil {
		return nil
	}
	return o.RunbookID
}

func (o *GetSessionResponse) GetStatus() *GetSessionResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetSessionResponse) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetSessionResponse) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetSessionResponse) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}
