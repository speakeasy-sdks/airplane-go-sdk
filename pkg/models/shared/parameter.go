// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Component - Used to specify UI-only type modifiers
type Component string

const (
	ComponentUnknown   Component = ""
	ComponentEditorSQL Component = "editor-sql"
	ComponentTextarea  Component = "textarea"
)

func (e Component) ToPointer() *Component {
	return &e
}

func (e *Component) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "editor-sql":
		fallthrough
	case "textarea":
		*e = Component(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Component: %v", v)
	}
}

// Type - Parameter data type.
type Type string

const (
	TypeAny       Type = "any"
	TypeString    Type = "string"
	TypeBoolean   Type = "boolean"
	TypeUpload    Type = "upload"
	TypeInteger   Type = "integer"
	TypeFloat     Type = "float"
	TypeDate      Type = "date"
	TypeDatetime  Type = "datetime"
	TypeConfigvar Type = "configvar"
	TypeList      Type = "list"
	TypeMap       Type = "map"
	TypeObject    Type = "object"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "string":
		fallthrough
	case "boolean":
		fallthrough
	case "upload":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "date":
		fallthrough
	case "datetime":
		fallthrough
	case "configvar":
		fallthrough
	case "list":
		fallthrough
	case "map":
		fallthrough
	case "object":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type Parameter struct {
	// Used to specify UI-only type modifiers
	Component   *Component   `json:"component,omitempty"`
	Constraints *Constraints `json:"constraints,omitempty"`
	// Optional default value for this parameter, used if not set.
	Default interface{} `json:"default,omitempty"`
	// Description for this parameter.
	Desc *string `json:"desc,omitempty"`
	// Name for this parameter.
	Name *string `json:"name,omitempty"`
	// If this parameter has an object data type, represents an ordered list of key-value pairs that can be included in this object.
	Params []Parameter `json:"params,omitempty"`
	// A human-friendly identifier for the parameter that can be referenced inside a task or runbook.
	// Airplane automatically generates a slug when provided a parameter name.
	Slug *string `json:"slug,omitempty"`
	// Parameter data type.
	Type   *Type      `json:"type,omitempty"`
	Values *Parameter `json:"values,omitempty"`
}

func (o *Parameter) GetComponent() *Component {
	if o == nil {
		return nil
	}
	return o.Component
}

func (o *Parameter) GetConstraints() *Constraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *Parameter) GetDefault() interface{} {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *Parameter) GetDesc() *string {
	if o == nil {
		return nil
	}
	return o.Desc
}

func (o *Parameter) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Parameter) GetParams() []Parameter {
	if o == nil {
		return nil
	}
	return o.Params
}

func (o *Parameter) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *Parameter) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Parameter) GetValues() *Parameter {
	if o == nil {
		return nil
	}
	return o.Values
}
